locals {

  devops_repo = [
    "sideproject-0403-"
  ]


  backend_repo = []
  frontend_repo = []

  respositories = [
    "EXAMPLE-REPO-1",
    "EXAMPLE-REPO-2",
    "EXAMPLE-REPO-3"
  ]

}

resource "github_repository" "sideproject-0403-api" {
  name                = "sideproject-0403-api"
  description         = "api repo for sideproject-0403"
  visibility          = "private"
  auto_init           = true

}

resource "github_repository" "sideproject-0403-api-docs" {
  name                = "sideproject-0403-api-docs"
  description         = "api docs repo for sideproject-0403"
  visibility          = "private"
  auto_init           = true


}

resource "github_repository" "sideproject-0403-android-app" {
  name                = "sideproject-0403-andorid-app"
  description         = "android aoo repo for sideproject-0403"
  visibility          = "private"
  auto_init           = true

}


resource "github_repository" "sideproject-0403-k8s-manifest" {
  name                = "sideproject-0403-k8s-manifest"
  description         = "k8s manifest repo for sideproject-0403"
  visibility          = "private"
  auto_init           = true

}



# Create new repository from template
resource "github_repository" "respositories" {
  count = length(local.respositories)

  name               = local.respositories[count.index]
  description        = "Repository generated by Terraform"
  gitignore_template = "Terraform"
  visibility         = "public"
  auto_init          = true
}

# Branch Protection Rules
resource "github_branch_protection" "branch_protection" {
  count = length(github_repository.respositories)

  repository_id  = github_repository.respositories[count.index].id
  pattern        = "master"
  enforce_admins = true

  required_pull_request_reviews {
    require_code_owner_reviews      = true
    required_approving_review_count = 1
    dismiss_stale_reviews           = true
  }

}

resource "github_branch" "branch_development" {
  count = length(github_repository.respositories)

  repository = github_repository.respositories[count.index].name
  branch     = "development"
  source_branch = "master"
}

resource "github_branch" "branch_test" {
  count = length(github_repository.respositories)

  repository = github_repository.respositories[count.index].name
  branch     = "test"
  source_branch = "master"
}

resource "github_branch" "branch_production" {
  count = length(github_repository.respositories)

  repository = github_repository.respositories[count.index].name
  branch     = "production"
  source_branch = "master"
}

resource "github_branch_default" "default" {
  count = length(github_repository.respositories)

  repository = github_repository.respositories[count.index].name
  branch     = "master"
}